// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/user_preferences_model.dart';
import 'features/go/models/go_map_info_model.dart';
import 'features/go/models/go_model.dart';
import 'features/go/models/go_route_models.dart';
import 'features/study/models/study_bibles_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 1108208325891907894),
    name: 'BibleVersion',
    lastPropertyId: const obx_int.IdUid(3, 2509434359021614200),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 803950352570525038),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 930578468286936079),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2509434359021614200),
        name: 'languageCode',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(name: 'books', srcEntity: 'Book', srcField: ''),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 2656867992688458106),
    name: 'Book',
    lastPropertyId: const obx_int.IdUid(4, 495489797622312102),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6750753493724463676),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6318607285927709688),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2965411061767450122),
        name: 'bookId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 495489797622312102),
        name: 'bibleVersionId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 1848770743429542012),
        relationTarget: 'BibleVersion',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'chapters',
        srcEntity: 'Chapter',
        srcField: '',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 2011349659896141015),
    name: 'Chapter',
    lastPropertyId: const obx_int.IdUid(3, 5680514226746460550),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 835196719857378343),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4348947436410447236),
        name: 'chapterNumber',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5680514226746460550),
        name: 'bookId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 3696095050149998676),
        relationTarget: 'Book',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(name: 'verses', srcEntity: 'Verse', srcField: ''),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 2581991933704451410),
    name: 'GoArea',
    lastPropertyId: const obx_int.IdUid(4, 7313021301459525363),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6686267468551258594),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5478239248086131324),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5597449487998923680),
        name: 'latitudes',
        type: 29,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7313021301459525363),
        name: 'longitudes',
        type: 29,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 778277478901828356),
    name: 'GoChurch',
    lastPropertyId: const obx_int.IdUid(9, 7051477218307715943),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 416036223156980570),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1240321859934202986),
        name: 'churchName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7990625223983737043),
        name: 'pastorName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 389649832795722252),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7510178591368233865),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7898497590397696883),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7852969470081059793),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5604855680606771340),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7051477218307715943),
        name: 'financialStatus',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 3156414013354652820),
        name: 'notes',
        targetId: const obx_int.IdUid(6, 3351754945711561694),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 3351754945711561694),
    name: 'GoChurchNote',
    lastPropertyId: const obx_int.IdUid(5, 8004177671557279527),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2536065282438748808),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5459946583932206400),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7741593332167264565),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7279943606163840545),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8004177671557279527),
        name: 'churchId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 6452243421721143783),
        relationTarget: 'GoChurch',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 1932857800339284660),
    name: 'GoContact',
    lastPropertyId: const obx_int.IdUid(10, 799554956631997860),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6912255271271903913),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 653655907319877823),
        name: 'fullName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7903657547359608705),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1554969967934689763),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7063914535978387056),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8675150846094462374),
        name: 'birthday',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 306576031925155333),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8278993525659880444),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3303690581531174346),
        name: 'isVisited',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 799554956631997860),
        name: 'eternalStatus',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 3706472980107068478),
        name: 'notes',
        targetId: const obx_int.IdUid(8, 6401499209465007026),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 6401499209465007026),
    name: 'GoContactNote',
    lastPropertyId: const obx_int.IdUid(5, 6785649527404607749),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6403266277387810916),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4507355852549920692),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2843220440182287919),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5493461928474319779),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6785649527404607749),
        name: 'contactId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 6950554588548521945),
        relationTarget: 'GoContact',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 3746264056618518472),
    name: 'GoMapInfo',
    lastPropertyId: const obx_int.IdUid(8, 1697524944266314053),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6221525595354137790),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7191543307700277195),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1787724314252999560),
        name: 'filePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6043058546749222523),
        name: 'downloadUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5770312463077534013),
        name: 'isTemporary',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4918750042898984290),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1174265963521645916),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1697524944266314053),
        name: 'zoomLevel',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(10, 2870364180683998006),
    name: 'GoMinistry',
    lastPropertyId: const obx_int.IdUid(9, 3788835813831914912),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8225053065328132572),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6208727265875727745),
        name: 'ministryName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 456191029750230315),
        name: 'contactName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5303863057988725376),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3380312779267856652),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6063677427871092189),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1714754446381723584),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5547544038810189187),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3788835813831914912),
        name: 'partnerStatus',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(3, 8601503062500780757),
        name: 'notes',
        targetId: const obx_int.IdUid(11, 2650851304864991337),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(11, 2650851304864991337),
    name: 'GoMinistryNote',
    lastPropertyId: const obx_int.IdUid(5, 7527546968452889603),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7209024629691813535),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4050779294227961970),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2416022845266425697),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6374589606668948492),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7527546968452889603),
        name: 'ministryId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 5218509032195148706),
        relationTarget: 'GoMinistry',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(12, 5271916153367038342),
    name: 'GoStreet',
    lastPropertyId: const obx_int.IdUid(5, 6217939495745925754),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1741823644670565459),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3091321400795939492),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5471576967811879833),
        name: 'latitudes',
        type: 29,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4031050895621827482),
        name: 'longitudes',
        type: 29,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6217939495745925754),
        name: 'type',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(13, 1329192966920966893),
    name: 'GoZone',
    lastPropertyId: const obx_int.IdUid(6, 5872130129921056156),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3099070664643953758),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1673356339923354197),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1546181696929102737),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7319729223075846979),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1332748596660934022),
        name: 'widthInMeters',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5872130129921056156),
        name: 'heightInMeters',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(14, 9106214510446720645),
    name: 'UserPreferences',
    lastPropertyId: const obx_int.IdUid(6, 453852072683028075),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6066784048884642074),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2853842368378585079),
        name: 'currentMap',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2291598332955056600),
        name: 'fontFamily',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2481221351696003343),
        name: 'fontSize',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3881933936764413591),
        name: 'languageCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 453852072683028075),
        name: 'currentBibleVersionId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(15, 9125901878576920280),
    name: 'Verse',
    lastPropertyId: const obx_int.IdUid(4, 3092268269636654728),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3342819325794452704),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 9111710162149925289),
        name: 'verseNumber',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 757148646658644944),
        name: 'text',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3092268269636654728),
        name: 'chapterId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(6, 8747987787705731891),
        relationTarget: 'Chapter',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(15, 9125901878576920280),
    lastIndexId: const obx_int.IdUid(6, 8747987787705731891),
    lastRelationId: const obx_int.IdUid(3, 8601503062500780757),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    BibleVersion: obx_int.EntityDefinition<BibleVersion>(
      model: _entities[0],
      toOneRelations: (BibleVersion object) => [],
      toManyRelations: (BibleVersion object) => {
        obx_int.RelInfo<Book>.toOneBacklink(
          4,
          object.id,
          (Book srcObject) => srcObject.bibleVersion,
        ): object.books,
      },
      getId: (BibleVersion object) => object.id,
      setId: (BibleVersion object, int id) {
        object.id = id;
      },
      objectToFB: (BibleVersion object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final languageCodeOffset = fbb.writeString(object.languageCode);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, languageCodeOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final languageCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = BibleVersion(
          id: idParam,
          name: nameParam,
          languageCode: languageCodeParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<BibleVersion>(
          object.books,
          store,
          obx_int.RelInfo<Book>.toOneBacklink(
            4,
            object.id,
            (Book srcObject) => srcObject.bibleVersion,
          ),
        );
        return object;
      },
    ),
    Book: obx_int.EntityDefinition<Book>(
      model: _entities[1],
      toOneRelations: (Book object) => [object.bibleVersion],
      toManyRelations: (Book object) => {
        obx_int.RelInfo<Chapter>.toOneBacklink(
          3,
          object.id,
          (Chapter srcObject) => srcObject.book,
        ): object.chapters,
      },
      getId: (Book object) => object.id,
      setId: (Book object, int id) {
        object.id = id;
      },
      objectToFB: (Book object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final bookIdOffset = fbb.writeString(object.bookId);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, bookIdOffset);
        fbb.addInt64(3, object.bibleVersion.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final bookIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = Book(id: idParam, name: nameParam, bookId: bookIdParam);
        object.bibleVersion.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.bibleVersion.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Book>(
          object.chapters,
          store,
          obx_int.RelInfo<Chapter>.toOneBacklink(
            3,
            object.id,
            (Chapter srcObject) => srcObject.book,
          ),
        );
        return object;
      },
    ),
    Chapter: obx_int.EntityDefinition<Chapter>(
      model: _entities[2],
      toOneRelations: (Chapter object) => [object.book],
      toManyRelations: (Chapter object) => {
        obx_int.RelInfo<Verse>.toOneBacklink(
          4,
          object.id,
          (Verse srcObject) => srcObject.chapter,
        ): object.verses,
      },
      getId: (Chapter object) => object.id,
      setId: (Chapter object, int id) {
        object.id = id;
      },
      objectToFB: (Chapter object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.chapterNumber);
        fbb.addInt64(2, object.book.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final chapterNumberParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final object = Chapter(id: idParam, chapterNumber: chapterNumberParam);
        object.book.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.book.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Chapter>(
          object.verses,
          store,
          obx_int.RelInfo<Verse>.toOneBacklink(
            4,
            object.id,
            (Verse srcObject) => srcObject.chapter,
          ),
        );
        return object;
      },
    ),
    GoArea: obx_int.EntityDefinition<GoArea>(
      model: _entities[3],
      toOneRelations: (GoArea object) => [],
      toManyRelations: (GoArea object) => {},
      getId: (GoArea object) => object.id,
      setId: (GoArea object, int id) {
        object.id = id;
      },
      objectToFB: (GoArea object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final latitudesOffset = fbb.writeListFloat64(object.latitudes);
        final longitudesOffset = fbb.writeListFloat64(object.longitudes);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, latitudesOffset);
        fbb.addOffset(3, longitudesOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final longitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 10, []);
        final object = GoArea(
          id: idParam,
          name: nameParam,
          latitudes: latitudesParam,
          longitudes: longitudesParam,
        );

        return object;
      },
    ),
    GoChurch: obx_int.EntityDefinition<GoChurch>(
      model: _entities[4],
      toOneRelations: (GoChurch object) => [],
      toManyRelations: (GoChurch object) => {
        obx_int.RelInfo<GoChurch>.toMany(1, object.id): object.notes,
      },
      getId: (GoChurch object) => object.id,
      setId: (GoChurch object, int id) {
        object.id = id;
      },
      objectToFB: (GoChurch object, fb.Builder fbb) {
        final churchNameOffset = fbb.writeString(object.churchName);
        final pastorNameOffset = object.pastorName == null
            ? null
            : fbb.writeString(object.pastorName!);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final emailOffset = object.email == null
            ? null
            : fbb.writeString(object.email!);
        final financialStatusOffset = object.financialStatus == null
            ? null
            : fbb.writeString(object.financialStatus!);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, churchNameOffset);
        fbb.addOffset(2, pastorNameOffset);
        fbb.addOffset(3, addressOffset);
        fbb.addOffset(4, phoneOffset);
        fbb.addOffset(5, emailOffset);
        fbb.addFloat64(6, object.latitude);
        fbb.addFloat64(7, object.longitude);
        fbb.addOffset(8, financialStatusOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final churchNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final pastorNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final financialStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final object = GoChurch(
          id: idParam,
          churchName: churchNameParam,
          pastorName: pastorNameParam,
          address: addressParam,
          phone: phoneParam,
          email: emailParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          financialStatus: financialStatusParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<GoChurch>(
          object.notes,
          store,
          obx_int.RelInfo<GoChurch>.toMany(1, object.id),
        );
        return object;
      },
    ),
    GoChurchNote: obx_int.EntityDefinition<GoChurchNote>(
      model: _entities[5],
      toOneRelations: (GoChurchNote object) => [object.church],
      toManyRelations: (GoChurchNote object) => {},
      getId: (GoChurchNote object) => object.id,
      setId: (GoChurchNote object, int id) {
        object.id = id;
      },
      objectToFB: (GoChurchNote object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(3, object.updatedAt?.millisecondsSinceEpoch);
        fbb.addInt64(4, object.church.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final updatedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final updatedAtParam = updatedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
        final object = GoChurchNote(
          id: idParam,
          content: contentParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        );
        object.church.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.church.attach(store);
        return object;
      },
    ),
    GoContact: obx_int.EntityDefinition<GoContact>(
      model: _entities[6],
      toOneRelations: (GoContact object) => [],
      toManyRelations: (GoContact object) => {
        obx_int.RelInfo<GoContact>.toMany(2, object.id): object.notes,
      },
      getId: (GoContact object) => object.id,
      setId: (GoContact object, int id) {
        object.id = id;
      },
      objectToFB: (GoContact object, fb.Builder fbb) {
        final fullNameOffset = fbb.writeString(object.fullName);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final birthdayOffset = object.birthday == null
            ? null
            : fbb.writeString(object.birthday!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final emailOffset = object.email == null
            ? null
            : fbb.writeString(object.email!);
        final eternalStatusOffset = object.eternalStatus == null
            ? null
            : fbb.writeString(object.eternalStatus!);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, fullNameOffset);
        fbb.addFloat64(2, object.latitude);
        fbb.addFloat64(3, object.longitude);
        fbb.addOffset(4, addressOffset);
        fbb.addOffset(5, birthdayOffset);
        fbb.addOffset(6, phoneOffset);
        fbb.addOffset(7, emailOffset);
        fbb.addBool(8, object.isVisited);
        fbb.addOffset(9, eternalStatusOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final fullNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          8,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final birthdayParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final isVisitedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          20,
          false,
        );
        final eternalStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final object = GoContact(
          id: idParam,
          fullName: fullNameParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          address: addressParam,
          birthday: birthdayParam,
          phone: phoneParam,
          email: emailParam,
          isVisited: isVisitedParam,
          eternalStatus: eternalStatusParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<GoContact>(
          object.notes,
          store,
          obx_int.RelInfo<GoContact>.toMany(2, object.id),
        );
        return object;
      },
    ),
    GoContactNote: obx_int.EntityDefinition<GoContactNote>(
      model: _entities[7],
      toOneRelations: (GoContactNote object) => [object.contact],
      toManyRelations: (GoContactNote object) => {},
      getId: (GoContactNote object) => object.id,
      setId: (GoContactNote object, int id) {
        object.id = id;
      },
      objectToFB: (GoContactNote object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(3, object.updatedAt?.millisecondsSinceEpoch);
        fbb.addInt64(4, object.contact.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final updatedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final updatedAtParam = updatedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
        final object = GoContactNote(
          id: idParam,
          content: contentParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        );
        object.contact.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.contact.attach(store);
        return object;
      },
    ),
    GoMapInfo: obx_int.EntityDefinition<GoMapInfo>(
      model: _entities[8],
      toOneRelations: (GoMapInfo object) => [],
      toManyRelations: (GoMapInfo object) => {},
      getId: (GoMapInfo object) => object.id,
      setId: (GoMapInfo object, int id) {
        object.id = id;
      },
      objectToFB: (GoMapInfo object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final filePathOffset = object.filePath == null
            ? null
            : fbb.writeString(object.filePath!);
        final downloadUrlOffset = object.downloadUrl == null
            ? null
            : fbb.writeString(object.downloadUrl!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, filePathOffset);
        fbb.addOffset(3, downloadUrlOffset);
        fbb.addBool(4, object.isTemporary);
        fbb.addFloat64(5, object.latitude);
        fbb.addFloat64(6, object.longitude);
        fbb.addInt64(7, object.zoomLevel);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final filePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final downloadUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final isTemporaryParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final zoomLevelParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final object = GoMapInfo(
          id: idParam,
          name: nameParam,
          filePath: filePathParam,
          downloadUrl: downloadUrlParam,
          isTemporary: isTemporaryParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          zoomLevel: zoomLevelParam,
        );

        return object;
      },
    ),
    GoMinistry: obx_int.EntityDefinition<GoMinistry>(
      model: _entities[9],
      toOneRelations: (GoMinistry object) => [],
      toManyRelations: (GoMinistry object) => {
        obx_int.RelInfo<GoMinistry>.toMany(3, object.id): object.notes,
      },
      getId: (GoMinistry object) => object.id,
      setId: (GoMinistry object, int id) {
        object.id = id;
      },
      objectToFB: (GoMinistry object, fb.Builder fbb) {
        final ministryNameOffset = fbb.writeString(object.ministryName);
        final contactNameOffset = object.contactName == null
            ? null
            : fbb.writeString(object.contactName!);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final emailOffset = object.email == null
            ? null
            : fbb.writeString(object.email!);
        final partnerStatusOffset = object.partnerStatus == null
            ? null
            : fbb.writeString(object.partnerStatus!);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, ministryNameOffset);
        fbb.addOffset(2, contactNameOffset);
        fbb.addOffset(3, addressOffset);
        fbb.addOffset(4, phoneOffset);
        fbb.addOffset(5, emailOffset);
        fbb.addFloat64(6, object.latitude);
        fbb.addFloat64(7, object.longitude);
        fbb.addOffset(8, partnerStatusOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final ministryNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final contactNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final partnerStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final object = GoMinistry(
          id: idParam,
          ministryName: ministryNameParam,
          contactName: contactNameParam,
          address: addressParam,
          phone: phoneParam,
          email: emailParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          partnerStatus: partnerStatusParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<GoMinistry>(
          object.notes,
          store,
          obx_int.RelInfo<GoMinistry>.toMany(3, object.id),
        );
        return object;
      },
    ),
    GoMinistryNote: obx_int.EntityDefinition<GoMinistryNote>(
      model: _entities[10],
      toOneRelations: (GoMinistryNote object) => [object.ministry],
      toManyRelations: (GoMinistryNote object) => {},
      getId: (GoMinistryNote object) => object.id,
      setId: (GoMinistryNote object, int id) {
        object.id = id;
      },
      objectToFB: (GoMinistryNote object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(3, object.updatedAt?.millisecondsSinceEpoch);
        fbb.addInt64(4, object.ministry.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final updatedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final updatedAtParam = updatedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
        final object = GoMinistryNote(
          id: idParam,
          content: contentParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        );
        object.ministry.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.ministry.attach(store);
        return object;
      },
    ),
    GoStreet: obx_int.EntityDefinition<GoStreet>(
      model: _entities[11],
      toOneRelations: (GoStreet object) => [],
      toManyRelations: (GoStreet object) => {},
      getId: (GoStreet object) => object.id,
      setId: (GoStreet object, int id) {
        object.id = id;
      },
      objectToFB: (GoStreet object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final latitudesOffset = fbb.writeListFloat64(object.latitudes);
        final longitudesOffset = fbb.writeListFloat64(object.longitudes);
        final typeOffset = object.type == null
            ? null
            : fbb.writeString(object.type!);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, latitudesOffset);
        fbb.addOffset(3, longitudesOffset);
        fbb.addOffset(4, typeOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final longitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 10, []);
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final object = GoStreet(
          id: idParam,
          name: nameParam,
          latitudes: latitudesParam,
          longitudes: longitudesParam,
          type: typeParam,
        );

        return object;
      },
    ),
    GoZone: obx_int.EntityDefinition<GoZone>(
      model: _entities[12],
      toOneRelations: (GoZone object) => [],
      toManyRelations: (GoZone object) => {},
      getId: (GoZone object) => object.id,
      setId: (GoZone object, int id) {
        object.id = id;
      },
      objectToFB: (GoZone object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addFloat64(2, object.latitude);
        fbb.addFloat64(3, object.longitude);
        fbb.addFloat64(4, object.widthInMeters);
        fbb.addFloat64(5, object.heightInMeters);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final longitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final widthInMetersParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final heightInMetersParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final object = GoZone(
          id: idParam,
          name: nameParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          widthInMeters: widthInMetersParam,
          heightInMeters: heightInMetersParam,
        );

        return object;
      },
    ),
    UserPreferences: obx_int.EntityDefinition<UserPreferences>(
      model: _entities[13],
      toOneRelations: (UserPreferences object) => [],
      toManyRelations: (UserPreferences object) => {},
      getId: (UserPreferences object) => object.id,
      setId: (UserPreferences object, int id) {
        object.id = id;
      },
      objectToFB: (UserPreferences object, fb.Builder fbb) {
        final currentMapOffset = object.currentMap == null
            ? null
            : fbb.writeString(object.currentMap!);
        final fontFamilyOffset = object.fontFamily == null
            ? null
            : fbb.writeString(object.fontFamily!);
        final languageCodeOffset = object.languageCode == null
            ? null
            : fbb.writeString(object.languageCode!);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, currentMapOffset);
        fbb.addOffset(2, fontFamilyOffset);
        fbb.addFloat64(3, object.fontSize);
        fbb.addOffset(4, languageCodeOffset);
        fbb.addInt64(5, object.currentBibleVersionId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final currentMapParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final fontFamilyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final fontSizeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final languageCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final currentBibleVersionIdParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 14);
        final object = UserPreferences(
          id: idParam,
          currentMap: currentMapParam,
          fontFamily: fontFamilyParam,
          fontSize: fontSizeParam,
          languageCode: languageCodeParam,
          currentBibleVersionId: currentBibleVersionIdParam,
        );

        return object;
      },
    ),
    Verse: obx_int.EntityDefinition<Verse>(
      model: _entities[14],
      toOneRelations: (Verse object) => [object.chapter],
      toManyRelations: (Verse object) => {},
      getId: (Verse object) => object.id,
      setId: (Verse object, int id) {
        object.id = id;
      },
      objectToFB: (Verse object, fb.Builder fbb) {
        final textOffset = fbb.writeString(object.text);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.verseNumber);
        fbb.addOffset(2, textOffset);
        fbb.addInt64(3, object.chapter.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final verseNumberParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final textParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = Verse(
          id: idParam,
          verseNumber: verseNumberParam,
          text: textParam,
        );
        object.chapter.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.chapter.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [BibleVersion] entity fields to define ObjectBox queries.
class BibleVersion_ {
  /// See [BibleVersion.id].
  static final id = obx.QueryIntegerProperty<BibleVersion>(
    _entities[0].properties[0],
  );

  /// See [BibleVersion.name].
  static final name = obx.QueryStringProperty<BibleVersion>(
    _entities[0].properties[1],
  );

  /// See [BibleVersion.languageCode].
  static final languageCode = obx.QueryStringProperty<BibleVersion>(
    _entities[0].properties[2],
  );

  /// see [BibleVersion.books]
  static final books = obx.QueryBacklinkToMany<Book, BibleVersion>(
    Book_.bibleVersion,
  );
}

/// [Book] entity fields to define ObjectBox queries.
class Book_ {
  /// See [Book.id].
  static final id = obx.QueryIntegerProperty<Book>(_entities[1].properties[0]);

  /// See [Book.name].
  static final name = obx.QueryStringProperty<Book>(_entities[1].properties[1]);

  /// See [Book.bookId].
  static final bookId = obx.QueryStringProperty<Book>(
    _entities[1].properties[2],
  );

  /// See [Book.bibleVersion].
  static final bibleVersion = obx.QueryRelationToOne<Book, BibleVersion>(
    _entities[1].properties[3],
  );

  /// see [Book.chapters]
  static final chapters = obx.QueryBacklinkToMany<Chapter, Book>(Chapter_.book);
}

/// [Chapter] entity fields to define ObjectBox queries.
class Chapter_ {
  /// See [Chapter.id].
  static final id = obx.QueryIntegerProperty<Chapter>(
    _entities[2].properties[0],
  );

  /// See [Chapter.chapterNumber].
  static final chapterNumber = obx.QueryIntegerProperty<Chapter>(
    _entities[2].properties[1],
  );

  /// See [Chapter.book].
  static final book = obx.QueryRelationToOne<Chapter, Book>(
    _entities[2].properties[2],
  );

  /// see [Chapter.verses]
  static final verses = obx.QueryBacklinkToMany<Verse, Chapter>(Verse_.chapter);
}

/// [GoArea] entity fields to define ObjectBox queries.
class GoArea_ {
  /// See [GoArea.id].
  static final id = obx.QueryIntegerProperty<GoArea>(
    _entities[3].properties[0],
  );

  /// See [GoArea.name].
  static final name = obx.QueryStringProperty<GoArea>(
    _entities[3].properties[1],
  );

  /// See [GoArea.latitudes].
  static final latitudes = obx.QueryDoubleVectorProperty<GoArea>(
    _entities[3].properties[2],
  );

  /// See [GoArea.longitudes].
  static final longitudes = obx.QueryDoubleVectorProperty<GoArea>(
    _entities[3].properties[3],
  );
}

/// [GoChurch] entity fields to define ObjectBox queries.
class GoChurch_ {
  /// See [GoChurch.id].
  static final id = obx.QueryIntegerProperty<GoChurch>(
    _entities[4].properties[0],
  );

  /// See [GoChurch.churchName].
  static final churchName = obx.QueryStringProperty<GoChurch>(
    _entities[4].properties[1],
  );

  /// See [GoChurch.pastorName].
  static final pastorName = obx.QueryStringProperty<GoChurch>(
    _entities[4].properties[2],
  );

  /// See [GoChurch.address].
  static final address = obx.QueryStringProperty<GoChurch>(
    _entities[4].properties[3],
  );

  /// See [GoChurch.phone].
  static final phone = obx.QueryStringProperty<GoChurch>(
    _entities[4].properties[4],
  );

  /// See [GoChurch.email].
  static final email = obx.QueryStringProperty<GoChurch>(
    _entities[4].properties[5],
  );

  /// See [GoChurch.latitude].
  static final latitude = obx.QueryDoubleProperty<GoChurch>(
    _entities[4].properties[6],
  );

  /// See [GoChurch.longitude].
  static final longitude = obx.QueryDoubleProperty<GoChurch>(
    _entities[4].properties[7],
  );

  /// See [GoChurch.financialStatus].
  static final financialStatus = obx.QueryStringProperty<GoChurch>(
    _entities[4].properties[8],
  );

  /// see [GoChurch.notes]
  static final notes = obx.QueryRelationToMany<GoChurch, GoChurchNote>(
    _entities[4].relations[0],
  );
}

/// [GoChurchNote] entity fields to define ObjectBox queries.
class GoChurchNote_ {
  /// See [GoChurchNote.id].
  static final id = obx.QueryIntegerProperty<GoChurchNote>(
    _entities[5].properties[0],
  );

  /// See [GoChurchNote.content].
  static final content = obx.QueryStringProperty<GoChurchNote>(
    _entities[5].properties[1],
  );

  /// See [GoChurchNote.createdAt].
  static final createdAt = obx.QueryDateProperty<GoChurchNote>(
    _entities[5].properties[2],
  );

  /// See [GoChurchNote.updatedAt].
  static final updatedAt = obx.QueryDateProperty<GoChurchNote>(
    _entities[5].properties[3],
  );

  /// See [GoChurchNote.church].
  static final church = obx.QueryRelationToOne<GoChurchNote, GoChurch>(
    _entities[5].properties[4],
  );
}

/// [GoContact] entity fields to define ObjectBox queries.
class GoContact_ {
  /// See [GoContact.id].
  static final id = obx.QueryIntegerProperty<GoContact>(
    _entities[6].properties[0],
  );

  /// See [GoContact.fullName].
  static final fullName = obx.QueryStringProperty<GoContact>(
    _entities[6].properties[1],
  );

  /// See [GoContact.latitude].
  static final latitude = obx.QueryDoubleProperty<GoContact>(
    _entities[6].properties[2],
  );

  /// See [GoContact.longitude].
  static final longitude = obx.QueryDoubleProperty<GoContact>(
    _entities[6].properties[3],
  );

  /// See [GoContact.address].
  static final address = obx.QueryStringProperty<GoContact>(
    _entities[6].properties[4],
  );

  /// See [GoContact.birthday].
  static final birthday = obx.QueryStringProperty<GoContact>(
    _entities[6].properties[5],
  );

  /// See [GoContact.phone].
  static final phone = obx.QueryStringProperty<GoContact>(
    _entities[6].properties[6],
  );

  /// See [GoContact.email].
  static final email = obx.QueryStringProperty<GoContact>(
    _entities[6].properties[7],
  );

  /// See [GoContact.isVisited].
  static final isVisited = obx.QueryBooleanProperty<GoContact>(
    _entities[6].properties[8],
  );

  /// See [GoContact.eternalStatus].
  static final eternalStatus = obx.QueryStringProperty<GoContact>(
    _entities[6].properties[9],
  );

  /// see [GoContact.notes]
  static final notes = obx.QueryRelationToMany<GoContact, GoContactNote>(
    _entities[6].relations[0],
  );
}

/// [GoContactNote] entity fields to define ObjectBox queries.
class GoContactNote_ {
  /// See [GoContactNote.id].
  static final id = obx.QueryIntegerProperty<GoContactNote>(
    _entities[7].properties[0],
  );

  /// See [GoContactNote.content].
  static final content = obx.QueryStringProperty<GoContactNote>(
    _entities[7].properties[1],
  );

  /// See [GoContactNote.createdAt].
  static final createdAt = obx.QueryDateProperty<GoContactNote>(
    _entities[7].properties[2],
  );

  /// See [GoContactNote.updatedAt].
  static final updatedAt = obx.QueryDateProperty<GoContactNote>(
    _entities[7].properties[3],
  );

  /// See [GoContactNote.contact].
  static final contact = obx.QueryRelationToOne<GoContactNote, GoContact>(
    _entities[7].properties[4],
  );
}

/// [GoMapInfo] entity fields to define ObjectBox queries.
class GoMapInfo_ {
  /// See [GoMapInfo.id].
  static final id = obx.QueryIntegerProperty<GoMapInfo>(
    _entities[8].properties[0],
  );

  /// See [GoMapInfo.name].
  static final name = obx.QueryStringProperty<GoMapInfo>(
    _entities[8].properties[1],
  );

  /// See [GoMapInfo.filePath].
  static final filePath = obx.QueryStringProperty<GoMapInfo>(
    _entities[8].properties[2],
  );

  /// See [GoMapInfo.downloadUrl].
  static final downloadUrl = obx.QueryStringProperty<GoMapInfo>(
    _entities[8].properties[3],
  );

  /// See [GoMapInfo.isTemporary].
  static final isTemporary = obx.QueryBooleanProperty<GoMapInfo>(
    _entities[8].properties[4],
  );

  /// See [GoMapInfo.latitude].
  static final latitude = obx.QueryDoubleProperty<GoMapInfo>(
    _entities[8].properties[5],
  );

  /// See [GoMapInfo.longitude].
  static final longitude = obx.QueryDoubleProperty<GoMapInfo>(
    _entities[8].properties[6],
  );

  /// See [GoMapInfo.zoomLevel].
  static final zoomLevel = obx.QueryIntegerProperty<GoMapInfo>(
    _entities[8].properties[7],
  );
}

/// [GoMinistry] entity fields to define ObjectBox queries.
class GoMinistry_ {
  /// See [GoMinistry.id].
  static final id = obx.QueryIntegerProperty<GoMinistry>(
    _entities[9].properties[0],
  );

  /// See [GoMinistry.ministryName].
  static final ministryName = obx.QueryStringProperty<GoMinistry>(
    _entities[9].properties[1],
  );

  /// See [GoMinistry.contactName].
  static final contactName = obx.QueryStringProperty<GoMinistry>(
    _entities[9].properties[2],
  );

  /// See [GoMinistry.address].
  static final address = obx.QueryStringProperty<GoMinistry>(
    _entities[9].properties[3],
  );

  /// See [GoMinistry.phone].
  static final phone = obx.QueryStringProperty<GoMinistry>(
    _entities[9].properties[4],
  );

  /// See [GoMinistry.email].
  static final email = obx.QueryStringProperty<GoMinistry>(
    _entities[9].properties[5],
  );

  /// See [GoMinistry.latitude].
  static final latitude = obx.QueryDoubleProperty<GoMinistry>(
    _entities[9].properties[6],
  );

  /// See [GoMinistry.longitude].
  static final longitude = obx.QueryDoubleProperty<GoMinistry>(
    _entities[9].properties[7],
  );

  /// See [GoMinistry.partnerStatus].
  static final partnerStatus = obx.QueryStringProperty<GoMinistry>(
    _entities[9].properties[8],
  );

  /// see [GoMinistry.notes]
  static final notes = obx.QueryRelationToMany<GoMinistry, GoMinistryNote>(
    _entities[9].relations[0],
  );
}

/// [GoMinistryNote] entity fields to define ObjectBox queries.
class GoMinistryNote_ {
  /// See [GoMinistryNote.id].
  static final id = obx.QueryIntegerProperty<GoMinistryNote>(
    _entities[10].properties[0],
  );

  /// See [GoMinistryNote.content].
  static final content = obx.QueryStringProperty<GoMinistryNote>(
    _entities[10].properties[1],
  );

  /// See [GoMinistryNote.createdAt].
  static final createdAt = obx.QueryDateProperty<GoMinistryNote>(
    _entities[10].properties[2],
  );

  /// See [GoMinistryNote.updatedAt].
  static final updatedAt = obx.QueryDateProperty<GoMinistryNote>(
    _entities[10].properties[3],
  );

  /// See [GoMinistryNote.ministry].
  static final ministry = obx.QueryRelationToOne<GoMinistryNote, GoMinistry>(
    _entities[10].properties[4],
  );
}

/// [GoStreet] entity fields to define ObjectBox queries.
class GoStreet_ {
  /// See [GoStreet.id].
  static final id = obx.QueryIntegerProperty<GoStreet>(
    _entities[11].properties[0],
  );

  /// See [GoStreet.name].
  static final name = obx.QueryStringProperty<GoStreet>(
    _entities[11].properties[1],
  );

  /// See [GoStreet.latitudes].
  static final latitudes = obx.QueryDoubleVectorProperty<GoStreet>(
    _entities[11].properties[2],
  );

  /// See [GoStreet.longitudes].
  static final longitudes = obx.QueryDoubleVectorProperty<GoStreet>(
    _entities[11].properties[3],
  );

  /// See [GoStreet.type].
  static final type = obx.QueryStringProperty<GoStreet>(
    _entities[11].properties[4],
  );
}

/// [GoZone] entity fields to define ObjectBox queries.
class GoZone_ {
  /// See [GoZone.id].
  static final id = obx.QueryIntegerProperty<GoZone>(
    _entities[12].properties[0],
  );

  /// See [GoZone.name].
  static final name = obx.QueryStringProperty<GoZone>(
    _entities[12].properties[1],
  );

  /// See [GoZone.latitude].
  static final latitude = obx.QueryDoubleProperty<GoZone>(
    _entities[12].properties[2],
  );

  /// See [GoZone.longitude].
  static final longitude = obx.QueryDoubleProperty<GoZone>(
    _entities[12].properties[3],
  );

  /// See [GoZone.widthInMeters].
  static final widthInMeters = obx.QueryDoubleProperty<GoZone>(
    _entities[12].properties[4],
  );

  /// See [GoZone.heightInMeters].
  static final heightInMeters = obx.QueryDoubleProperty<GoZone>(
    _entities[12].properties[5],
  );
}

/// [UserPreferences] entity fields to define ObjectBox queries.
class UserPreferences_ {
  /// See [UserPreferences.id].
  static final id = obx.QueryIntegerProperty<UserPreferences>(
    _entities[13].properties[0],
  );

  /// See [UserPreferences.currentMap].
  static final currentMap = obx.QueryStringProperty<UserPreferences>(
    _entities[13].properties[1],
  );

  /// See [UserPreferences.fontFamily].
  static final fontFamily = obx.QueryStringProperty<UserPreferences>(
    _entities[13].properties[2],
  );

  /// See [UserPreferences.fontSize].
  static final fontSize = obx.QueryDoubleProperty<UserPreferences>(
    _entities[13].properties[3],
  );

  /// See [UserPreferences.languageCode].
  static final languageCode = obx.QueryStringProperty<UserPreferences>(
    _entities[13].properties[4],
  );

  /// See [UserPreferences.currentBibleVersionId].
  static final currentBibleVersionId =
      obx.QueryIntegerProperty<UserPreferences>(_entities[13].properties[5]);
}

/// [Verse] entity fields to define ObjectBox queries.
class Verse_ {
  /// See [Verse.id].
  static final id = obx.QueryIntegerProperty<Verse>(
    _entities[14].properties[0],
  );

  /// See [Verse.verseNumber].
  static final verseNumber = obx.QueryIntegerProperty<Verse>(
    _entities[14].properties[1],
  );

  /// See [Verse.text].
  static final text = obx.QueryStringProperty<Verse>(
    _entities[14].properties[2],
  );

  /// See [Verse.chapter].
  static final chapter = obx.QueryRelationToOne<Verse, Chapter>(
    _entities[14].properties[3],
  );
}
