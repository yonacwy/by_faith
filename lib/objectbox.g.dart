// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/user_preferences_model.dart';
import 'features/go/models/go_map_info_model.dart';
import 'features/go/models/go_model.dart';
import 'features/go/models/go_route_models.dart';
import 'features/study/models/study_bibles_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5929613765295525711),
    name: 'BibleVersion',
    lastPropertyId: const obx_int.IdUid(3, 3290317264722410181),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5758178587501620443),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1392895879534642852),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3290317264722410181),
        name: 'languageCode',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(name: 'books', srcEntity: 'Book', srcField: ''),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 6514144642123825323),
    name: 'Book',
    lastPropertyId: const obx_int.IdUid(4, 8567328524996187650),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8229589692010228873),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5007777714971436213),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8706526003145112344),
        name: 'bookId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8567328524996187650),
        name: 'bibleVersionId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 5669627352559423401),
        relationTarget: 'BibleVersion',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'chapters',
        srcEntity: 'Chapter',
        srcField: '',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 3762921488572440383),
    name: 'Chapter',
    lastPropertyId: const obx_int.IdUid(3, 2855612311783142804),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4666106466883923663),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4519314946582169274),
        name: 'chapterNumber',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2855612311783142804),
        name: 'bookId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 4396906875524404158),
        relationTarget: 'Book',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(name: 'verses', srcEntity: 'Verse', srcField: ''),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 6346345534202357054),
    name: 'Footnote',
    lastPropertyId: const obx_int.IdUid(4, 6593655944184754872),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7218675280001673471),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1962691397204313542),
        name: 'caller',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5302640864129859718),
        name: 'text',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6593655944184754872),
        name: 'verseId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 525787107501050194),
        relationTarget: 'Verse',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 3093801091456645251),
    name: 'GoArea',
    lastPropertyId: const obx_int.IdUid(4, 9187343311041933708),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8711526193263464844),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5117397325705666607),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1122634101947373708),
        name: 'latitudes',
        type: 29,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 9187343311041933708),
        name: 'longitudes',
        type: 29,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 5076549526135208464),
    name: 'GoChurch',
    lastPropertyId: const obx_int.IdUid(9, 1865860877181723305),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6776039938481921239),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1802202214352012056),
        name: 'churchName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1236425932086081868),
        name: 'pastorName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6276729596105895661),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5817736905774350417),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1445835199665984791),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2827091406750670612),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8984422833646235842),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 1865860877181723305),
        name: 'financialStatus',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 2015030421706354878),
        name: 'notes',
        targetId: const obx_int.IdUid(7, 2499198326662473262),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 2499198326662473262),
    name: 'GoChurchNote',
    lastPropertyId: const obx_int.IdUid(5, 8142606139831620518),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7752432301512177775),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8248023890618768752),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4312273668176962616),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2692851118143566103),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8142606139831620518),
        name: 'churchId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 1621786823281970534),
        relationTarget: 'GoChurch',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 1717469661505577188),
    name: 'GoContact',
    lastPropertyId: const obx_int.IdUid(10, 998125985376004029),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5441310615714510213),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1589128174438907055),
        name: 'fullName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 466770939428195059),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5448218041802257451),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1242123621423419750),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3374870492535078005),
        name: 'birthday',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3819339839779393339),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5627146550180524167),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 641563798363097235),
        name: 'isVisited',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 998125985376004029),
        name: 'eternalStatus',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 2062858452978365094),
        name: 'notes',
        targetId: const obx_int.IdUid(9, 3109441418125994827),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 3109441418125994827),
    name: 'GoContactNote',
    lastPropertyId: const obx_int.IdUid(5, 6678418344990783533),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3786405350814971839),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4306140027779007909),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1671378386930304674),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7805638875137427974),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6678418344990783533),
        name: 'contactId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 5984116275207546566),
        relationTarget: 'GoContact',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(10, 3404911703197134787),
    name: 'GoMapInfo',
    lastPropertyId: const obx_int.IdUid(8, 3053868796215729586),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3458484008069971549),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7307583084094836046),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6628605703134198616),
        name: 'filePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 192106722506815361),
        name: 'downloadUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5447524414473885113),
        name: 'isTemporary',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 334577354790561705),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2140902790835553814),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3053868796215729586),
        name: 'zoomLevel',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(11, 283725501347890964),
    name: 'GoMinistry',
    lastPropertyId: const obx_int.IdUid(9, 4665094315776661541),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3393618463540252303),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2753655474694800693),
        name: 'ministryName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3502522387022774346),
        name: 'contactName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1005025353038834202),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7132726411900517184),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8508260482543604563),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4640763345478523338),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3958504448917051228),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4665094315776661541),
        name: 'partnerStatus',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(3, 2859513150906765962),
        name: 'notes',
        targetId: const obx_int.IdUid(12, 3135516209002801155),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(12, 3135516209002801155),
    name: 'GoMinistryNote',
    lastPropertyId: const obx_int.IdUid(5, 6386080792583004287),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8231063750355135913),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8847855821824570875),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 9151336151808821816),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3148602416260753679),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6386080792583004287),
        name: 'ministryId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(6, 3901299357643600852),
        relationTarget: 'GoMinistry',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(13, 5999358960303787311),
    name: 'GoStreet',
    lastPropertyId: const obx_int.IdUid(5, 2169087931705308657),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3870072043880598632),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8558609543661008497),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3880902833331981317),
        name: 'latitudes',
        type: 29,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2906946617906996935),
        name: 'longitudes',
        type: 29,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2169087931705308657),
        name: 'type',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(14, 4038999841859225290),
    name: 'GoZone',
    lastPropertyId: const obx_int.IdUid(6, 2735574394938914656),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1105127482469808764),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7045774242814972848),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2420822347540084249),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1027942872478104805),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4520034773753455158),
        name: 'widthInMeters',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2735574394938914656),
        name: 'heightInMeters',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(15, 1390472641931917158),
    name: 'StrongsEntry',
    lastPropertyId: const obx_int.IdUid(5, 7554033657394993695),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 379782591004018024),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7522504930952985120),
        name: 'strongsNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 244766219523998272),
        name: 'word',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1517873323773691897),
        name: 'position',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7554033657394993695),
        name: 'verseId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(7, 666382964867157644),
        relationTarget: 'Verse',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(16, 5334916226516842493),
    name: 'UserPreferences',
    lastPropertyId: const obx_int.IdUid(6, 5465055569150460381),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4075106502683577224),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2225132536306165617),
        name: 'currentMap',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3276710180754875974),
        name: 'fontFamily',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 624801467396458061),
        name: 'fontSize',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6642757416937063869),
        name: 'languageCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5465055569150460381),
        name: 'currentBibleVersionId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(17, 4657239357683002436),
    name: 'Verse',
    lastPropertyId: const obx_int.IdUid(4, 1042409101757814085),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5141538200753735708),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6062646266178215160),
        name: 'verseNumber',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6774991863507784784),
        name: 'text',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1042409101757814085),
        name: 'chapterId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(8, 1474436333932053173),
        relationTarget: 'Chapter',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'strongsEntries',
        srcEntity: 'StrongsEntry',
        srcField: '',
      ),
      obx_int.ModelBacklink(
        name: 'footnotes',
        srcEntity: 'Footnote',
        srcField: '',
      ),
    ],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(17, 4657239357683002436),
    lastIndexId: const obx_int.IdUid(8, 1474436333932053173),
    lastRelationId: const obx_int.IdUid(3, 2859513150906765962),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    BibleVersion: obx_int.EntityDefinition<BibleVersion>(
      model: _entities[0],
      toOneRelations: (BibleVersion object) => [],
      toManyRelations: (BibleVersion object) => {
        obx_int.RelInfo<Book>.toOneBacklink(
          4,
          object.id,
          (Book srcObject) => srcObject.bibleVersion,
        ): object.books,
      },
      getId: (BibleVersion object) => object.id,
      setId: (BibleVersion object, int id) {
        object.id = id;
      },
      objectToFB: (BibleVersion object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final languageCodeOffset = fbb.writeString(object.languageCode);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, languageCodeOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final languageCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = BibleVersion(
          id: idParam,
          name: nameParam,
          languageCode: languageCodeParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<BibleVersion>(
          object.books,
          store,
          obx_int.RelInfo<Book>.toOneBacklink(
            4,
            object.id,
            (Book srcObject) => srcObject.bibleVersion,
          ),
        );
        return object;
      },
    ),
    Book: obx_int.EntityDefinition<Book>(
      model: _entities[1],
      toOneRelations: (Book object) => [object.bibleVersion],
      toManyRelations: (Book object) => {
        obx_int.RelInfo<Chapter>.toOneBacklink(
          3,
          object.id,
          (Chapter srcObject) => srcObject.book,
        ): object.chapters,
      },
      getId: (Book object) => object.id,
      setId: (Book object, int id) {
        object.id = id;
      },
      objectToFB: (Book object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final bookIdOffset = fbb.writeString(object.bookId);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, bookIdOffset);
        fbb.addInt64(3, object.bibleVersion.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final bookIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = Book(id: idParam, name: nameParam, bookId: bookIdParam);
        object.bibleVersion.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.bibleVersion.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Book>(
          object.chapters,
          store,
          obx_int.RelInfo<Chapter>.toOneBacklink(
            3,
            object.id,
            (Chapter srcObject) => srcObject.book,
          ),
        );
        return object;
      },
    ),
    Chapter: obx_int.EntityDefinition<Chapter>(
      model: _entities[2],
      toOneRelations: (Chapter object) => [object.book],
      toManyRelations: (Chapter object) => {
        obx_int.RelInfo<Verse>.toOneBacklink(
          4,
          object.id,
          (Verse srcObject) => srcObject.chapter,
        ): object.verses,
      },
      getId: (Chapter object) => object.id,
      setId: (Chapter object, int id) {
        object.id = id;
      },
      objectToFB: (Chapter object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.chapterNumber);
        fbb.addInt64(2, object.book.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final chapterNumberParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final object = Chapter(id: idParam, chapterNumber: chapterNumberParam);
        object.book.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.book.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Chapter>(
          object.verses,
          store,
          obx_int.RelInfo<Verse>.toOneBacklink(
            4,
            object.id,
            (Verse srcObject) => srcObject.chapter,
          ),
        );
        return object;
      },
    ),
    Footnote: obx_int.EntityDefinition<Footnote>(
      model: _entities[3],
      toOneRelations: (Footnote object) => [object.verse],
      toManyRelations: (Footnote object) => {},
      getId: (Footnote object) => object.id,
      setId: (Footnote object, int id) {
        object.id = id;
      },
      objectToFB: (Footnote object, fb.Builder fbb) {
        final callerOffset = fbb.writeString(object.caller);
        final textOffset = fbb.writeString(object.text);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, callerOffset);
        fbb.addOffset(2, textOffset);
        fbb.addInt64(3, object.verse.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final callerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final textParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = Footnote(
          id: idParam,
          caller: callerParam,
          text: textParam,
        );
        object.verse.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.verse.attach(store);
        return object;
      },
    ),
    GoArea: obx_int.EntityDefinition<GoArea>(
      model: _entities[4],
      toOneRelations: (GoArea object) => [],
      toManyRelations: (GoArea object) => {},
      getId: (GoArea object) => object.id,
      setId: (GoArea object, int id) {
        object.id = id;
      },
      objectToFB: (GoArea object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final latitudesOffset = fbb.writeListFloat64(object.latitudes);
        final longitudesOffset = fbb.writeListFloat64(object.longitudes);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, latitudesOffset);
        fbb.addOffset(3, longitudesOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final longitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 10, []);
        final object = GoArea(
          id: idParam,
          name: nameParam,
          latitudes: latitudesParam,
          longitudes: longitudesParam,
        );

        return object;
      },
    ),
    GoChurch: obx_int.EntityDefinition<GoChurch>(
      model: _entities[5],
      toOneRelations: (GoChurch object) => [],
      toManyRelations: (GoChurch object) => {
        obx_int.RelInfo<GoChurch>.toMany(1, object.id): object.notes,
      },
      getId: (GoChurch object) => object.id,
      setId: (GoChurch object, int id) {
        object.id = id;
      },
      objectToFB: (GoChurch object, fb.Builder fbb) {
        final churchNameOffset = fbb.writeString(object.churchName);
        final pastorNameOffset = object.pastorName == null
            ? null
            : fbb.writeString(object.pastorName!);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final emailOffset = object.email == null
            ? null
            : fbb.writeString(object.email!);
        final financialStatusOffset = object.financialStatus == null
            ? null
            : fbb.writeString(object.financialStatus!);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, churchNameOffset);
        fbb.addOffset(2, pastorNameOffset);
        fbb.addOffset(3, addressOffset);
        fbb.addOffset(4, phoneOffset);
        fbb.addOffset(5, emailOffset);
        fbb.addFloat64(6, object.latitude);
        fbb.addFloat64(7, object.longitude);
        fbb.addOffset(8, financialStatusOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final churchNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final pastorNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final financialStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final object = GoChurch(
          id: idParam,
          churchName: churchNameParam,
          pastorName: pastorNameParam,
          address: addressParam,
          phone: phoneParam,
          email: emailParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          financialStatus: financialStatusParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<GoChurch>(
          object.notes,
          store,
          obx_int.RelInfo<GoChurch>.toMany(1, object.id),
        );
        return object;
      },
    ),
    GoChurchNote: obx_int.EntityDefinition<GoChurchNote>(
      model: _entities[6],
      toOneRelations: (GoChurchNote object) => [object.church],
      toManyRelations: (GoChurchNote object) => {},
      getId: (GoChurchNote object) => object.id,
      setId: (GoChurchNote object, int id) {
        object.id = id;
      },
      objectToFB: (GoChurchNote object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(3, object.updatedAt?.millisecondsSinceEpoch);
        fbb.addInt64(4, object.church.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final updatedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final updatedAtParam = updatedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
        final object = GoChurchNote(
          id: idParam,
          content: contentParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        );
        object.church.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.church.attach(store);
        return object;
      },
    ),
    GoContact: obx_int.EntityDefinition<GoContact>(
      model: _entities[7],
      toOneRelations: (GoContact object) => [],
      toManyRelations: (GoContact object) => {
        obx_int.RelInfo<GoContact>.toMany(2, object.id): object.notes,
      },
      getId: (GoContact object) => object.id,
      setId: (GoContact object, int id) {
        object.id = id;
      },
      objectToFB: (GoContact object, fb.Builder fbb) {
        final fullNameOffset = fbb.writeString(object.fullName);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final birthdayOffset = object.birthday == null
            ? null
            : fbb.writeString(object.birthday!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final emailOffset = object.email == null
            ? null
            : fbb.writeString(object.email!);
        final eternalStatusOffset = object.eternalStatus == null
            ? null
            : fbb.writeString(object.eternalStatus!);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, fullNameOffset);
        fbb.addFloat64(2, object.latitude);
        fbb.addFloat64(3, object.longitude);
        fbb.addOffset(4, addressOffset);
        fbb.addOffset(5, birthdayOffset);
        fbb.addOffset(6, phoneOffset);
        fbb.addOffset(7, emailOffset);
        fbb.addBool(8, object.isVisited);
        fbb.addOffset(9, eternalStatusOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final fullNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          8,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final birthdayParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final isVisitedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          20,
          false,
        );
        final eternalStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final object = GoContact(
          id: idParam,
          fullName: fullNameParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          address: addressParam,
          birthday: birthdayParam,
          phone: phoneParam,
          email: emailParam,
          isVisited: isVisitedParam,
          eternalStatus: eternalStatusParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<GoContact>(
          object.notes,
          store,
          obx_int.RelInfo<GoContact>.toMany(2, object.id),
        );
        return object;
      },
    ),
    GoContactNote: obx_int.EntityDefinition<GoContactNote>(
      model: _entities[8],
      toOneRelations: (GoContactNote object) => [object.contact],
      toManyRelations: (GoContactNote object) => {},
      getId: (GoContactNote object) => object.id,
      setId: (GoContactNote object, int id) {
        object.id = id;
      },
      objectToFB: (GoContactNote object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(3, object.updatedAt?.millisecondsSinceEpoch);
        fbb.addInt64(4, object.contact.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final updatedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final updatedAtParam = updatedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
        final object = GoContactNote(
          id: idParam,
          content: contentParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        );
        object.contact.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.contact.attach(store);
        return object;
      },
    ),
    GoMapInfo: obx_int.EntityDefinition<GoMapInfo>(
      model: _entities[9],
      toOneRelations: (GoMapInfo object) => [],
      toManyRelations: (GoMapInfo object) => {},
      getId: (GoMapInfo object) => object.id,
      setId: (GoMapInfo object, int id) {
        object.id = id;
      },
      objectToFB: (GoMapInfo object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final filePathOffset = object.filePath == null
            ? null
            : fbb.writeString(object.filePath!);
        final downloadUrlOffset = object.downloadUrl == null
            ? null
            : fbb.writeString(object.downloadUrl!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, filePathOffset);
        fbb.addOffset(3, downloadUrlOffset);
        fbb.addBool(4, object.isTemporary);
        fbb.addFloat64(5, object.latitude);
        fbb.addFloat64(6, object.longitude);
        fbb.addInt64(7, object.zoomLevel);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final filePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final downloadUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final isTemporaryParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final zoomLevelParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final object = GoMapInfo(
          id: idParam,
          name: nameParam,
          filePath: filePathParam,
          downloadUrl: downloadUrlParam,
          isTemporary: isTemporaryParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          zoomLevel: zoomLevelParam,
        );

        return object;
      },
    ),
    GoMinistry: obx_int.EntityDefinition<GoMinistry>(
      model: _entities[10],
      toOneRelations: (GoMinistry object) => [],
      toManyRelations: (GoMinistry object) => {
        obx_int.RelInfo<GoMinistry>.toMany(3, object.id): object.notes,
      },
      getId: (GoMinistry object) => object.id,
      setId: (GoMinistry object, int id) {
        object.id = id;
      },
      objectToFB: (GoMinistry object, fb.Builder fbb) {
        final ministryNameOffset = fbb.writeString(object.ministryName);
        final contactNameOffset = object.contactName == null
            ? null
            : fbb.writeString(object.contactName!);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final emailOffset = object.email == null
            ? null
            : fbb.writeString(object.email!);
        final partnerStatusOffset = object.partnerStatus == null
            ? null
            : fbb.writeString(object.partnerStatus!);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, ministryNameOffset);
        fbb.addOffset(2, contactNameOffset);
        fbb.addOffset(3, addressOffset);
        fbb.addOffset(4, phoneOffset);
        fbb.addOffset(5, emailOffset);
        fbb.addFloat64(6, object.latitude);
        fbb.addFloat64(7, object.longitude);
        fbb.addOffset(8, partnerStatusOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final ministryNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final contactNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final partnerStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final object = GoMinistry(
          id: idParam,
          ministryName: ministryNameParam,
          contactName: contactNameParam,
          address: addressParam,
          phone: phoneParam,
          email: emailParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          partnerStatus: partnerStatusParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<GoMinistry>(
          object.notes,
          store,
          obx_int.RelInfo<GoMinistry>.toMany(3, object.id),
        );
        return object;
      },
    ),
    GoMinistryNote: obx_int.EntityDefinition<GoMinistryNote>(
      model: _entities[11],
      toOneRelations: (GoMinistryNote object) => [object.ministry],
      toManyRelations: (GoMinistryNote object) => {},
      getId: (GoMinistryNote object) => object.id,
      setId: (GoMinistryNote object, int id) {
        object.id = id;
      },
      objectToFB: (GoMinistryNote object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(3, object.updatedAt?.millisecondsSinceEpoch);
        fbb.addInt64(4, object.ministry.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final updatedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final updatedAtParam = updatedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
        final object = GoMinistryNote(
          id: idParam,
          content: contentParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        );
        object.ministry.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.ministry.attach(store);
        return object;
      },
    ),
    GoStreet: obx_int.EntityDefinition<GoStreet>(
      model: _entities[12],
      toOneRelations: (GoStreet object) => [],
      toManyRelations: (GoStreet object) => {},
      getId: (GoStreet object) => object.id,
      setId: (GoStreet object, int id) {
        object.id = id;
      },
      objectToFB: (GoStreet object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final latitudesOffset = fbb.writeListFloat64(object.latitudes);
        final longitudesOffset = fbb.writeListFloat64(object.longitudes);
        final typeOffset = object.type == null
            ? null
            : fbb.writeString(object.type!);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, latitudesOffset);
        fbb.addOffset(3, longitudesOffset);
        fbb.addOffset(4, typeOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final longitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 10, []);
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final object = GoStreet(
          id: idParam,
          name: nameParam,
          latitudes: latitudesParam,
          longitudes: longitudesParam,
          type: typeParam,
        );

        return object;
      },
    ),
    GoZone: obx_int.EntityDefinition<GoZone>(
      model: _entities[13],
      toOneRelations: (GoZone object) => [],
      toManyRelations: (GoZone object) => {},
      getId: (GoZone object) => object.id,
      setId: (GoZone object, int id) {
        object.id = id;
      },
      objectToFB: (GoZone object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addFloat64(2, object.latitude);
        fbb.addFloat64(3, object.longitude);
        fbb.addFloat64(4, object.widthInMeters);
        fbb.addFloat64(5, object.heightInMeters);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final longitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final widthInMetersParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final heightInMetersParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final object = GoZone(
          id: idParam,
          name: nameParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          widthInMeters: widthInMetersParam,
          heightInMeters: heightInMetersParam,
        );

        return object;
      },
    ),
    StrongsEntry: obx_int.EntityDefinition<StrongsEntry>(
      model: _entities[14],
      toOneRelations: (StrongsEntry object) => [object.verse],
      toManyRelations: (StrongsEntry object) => {},
      getId: (StrongsEntry object) => object.id,
      setId: (StrongsEntry object, int id) {
        object.id = id;
      },
      objectToFB: (StrongsEntry object, fb.Builder fbb) {
        final strongsNumberOffset = fbb.writeString(object.strongsNumber);
        final wordOffset = fbb.writeString(object.word);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, strongsNumberOffset);
        fbb.addOffset(2, wordOffset);
        fbb.addInt64(3, object.position);
        fbb.addInt64(4, object.verse.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final strongsNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final wordParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final positionParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final object = StrongsEntry(
          id: idParam,
          strongsNumber: strongsNumberParam,
          word: wordParam,
          position: positionParam,
        );
        object.verse.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.verse.attach(store);
        return object;
      },
    ),
    UserPreferences: obx_int.EntityDefinition<UserPreferences>(
      model: _entities[15],
      toOneRelations: (UserPreferences object) => [],
      toManyRelations: (UserPreferences object) => {},
      getId: (UserPreferences object) => object.id,
      setId: (UserPreferences object, int id) {
        object.id = id;
      },
      objectToFB: (UserPreferences object, fb.Builder fbb) {
        final currentMapOffset = object.currentMap == null
            ? null
            : fbb.writeString(object.currentMap!);
        final fontFamilyOffset = object.fontFamily == null
            ? null
            : fbb.writeString(object.fontFamily!);
        final languageCodeOffset = object.languageCode == null
            ? null
            : fbb.writeString(object.languageCode!);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, currentMapOffset);
        fbb.addOffset(2, fontFamilyOffset);
        fbb.addFloat64(3, object.fontSize);
        fbb.addOffset(4, languageCodeOffset);
        fbb.addInt64(5, object.currentBibleVersionId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final currentMapParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final fontFamilyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final fontSizeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final languageCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final currentBibleVersionIdParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 14);
        final object = UserPreferences(
          id: idParam,
          currentMap: currentMapParam,
          fontFamily: fontFamilyParam,
          fontSize: fontSizeParam,
          languageCode: languageCodeParam,
          currentBibleVersionId: currentBibleVersionIdParam,
        );

        return object;
      },
    ),
    Verse: obx_int.EntityDefinition<Verse>(
      model: _entities[16],
      toOneRelations: (Verse object) => [object.chapter],
      toManyRelations: (Verse object) => {
        obx_int.RelInfo<StrongsEntry>.toOneBacklink(
          5,
          object.id,
          (StrongsEntry srcObject) => srcObject.verse,
        ): object.strongsEntries,
        obx_int.RelInfo<Footnote>.toOneBacklink(
          4,
          object.id,
          (Footnote srcObject) => srcObject.verse,
        ): object.footnotes,
      },
      getId: (Verse object) => object.id,
      setId: (Verse object, int id) {
        object.id = id;
      },
      objectToFB: (Verse object, fb.Builder fbb) {
        final textOffset = fbb.writeString(object.text);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.verseNumber);
        fbb.addOffset(2, textOffset);
        fbb.addInt64(3, object.chapter.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final verseNumberParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final textParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = Verse(
          id: idParam,
          verseNumber: verseNumberParam,
          text: textParam,
        );
        object.chapter.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.chapter.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Verse>(
          object.strongsEntries,
          store,
          obx_int.RelInfo<StrongsEntry>.toOneBacklink(
            5,
            object.id,
            (StrongsEntry srcObject) => srcObject.verse,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<Verse>(
          object.footnotes,
          store,
          obx_int.RelInfo<Footnote>.toOneBacklink(
            4,
            object.id,
            (Footnote srcObject) => srcObject.verse,
          ),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [BibleVersion] entity fields to define ObjectBox queries.
class BibleVersion_ {
  /// See [BibleVersion.id].
  static final id = obx.QueryIntegerProperty<BibleVersion>(
    _entities[0].properties[0],
  );

  /// See [BibleVersion.name].
  static final name = obx.QueryStringProperty<BibleVersion>(
    _entities[0].properties[1],
  );

  /// See [BibleVersion.languageCode].
  static final languageCode = obx.QueryStringProperty<BibleVersion>(
    _entities[0].properties[2],
  );

  /// see [BibleVersion.books]
  static final books = obx.QueryBacklinkToMany<Book, BibleVersion>(
    Book_.bibleVersion,
  );
}

/// [Book] entity fields to define ObjectBox queries.
class Book_ {
  /// See [Book.id].
  static final id = obx.QueryIntegerProperty<Book>(_entities[1].properties[0]);

  /// See [Book.name].
  static final name = obx.QueryStringProperty<Book>(_entities[1].properties[1]);

  /// See [Book.bookId].
  static final bookId = obx.QueryStringProperty<Book>(
    _entities[1].properties[2],
  );

  /// See [Book.bibleVersion].
  static final bibleVersion = obx.QueryRelationToOne<Book, BibleVersion>(
    _entities[1].properties[3],
  );

  /// see [Book.chapters]
  static final chapters = obx.QueryBacklinkToMany<Chapter, Book>(Chapter_.book);
}

/// [Chapter] entity fields to define ObjectBox queries.
class Chapter_ {
  /// See [Chapter.id].
  static final id = obx.QueryIntegerProperty<Chapter>(
    _entities[2].properties[0],
  );

  /// See [Chapter.chapterNumber].
  static final chapterNumber = obx.QueryIntegerProperty<Chapter>(
    _entities[2].properties[1],
  );

  /// See [Chapter.book].
  static final book = obx.QueryRelationToOne<Chapter, Book>(
    _entities[2].properties[2],
  );

  /// see [Chapter.verses]
  static final verses = obx.QueryBacklinkToMany<Verse, Chapter>(Verse_.chapter);
}

/// [Footnote] entity fields to define ObjectBox queries.
class Footnote_ {
  /// See [Footnote.id].
  static final id = obx.QueryIntegerProperty<Footnote>(
    _entities[3].properties[0],
  );

  /// See [Footnote.caller].
  static final caller = obx.QueryStringProperty<Footnote>(
    _entities[3].properties[1],
  );

  /// See [Footnote.text].
  static final text = obx.QueryStringProperty<Footnote>(
    _entities[3].properties[2],
  );

  /// See [Footnote.verse].
  static final verse = obx.QueryRelationToOne<Footnote, Verse>(
    _entities[3].properties[3],
  );
}

/// [GoArea] entity fields to define ObjectBox queries.
class GoArea_ {
  /// See [GoArea.id].
  static final id = obx.QueryIntegerProperty<GoArea>(
    _entities[4].properties[0],
  );

  /// See [GoArea.name].
  static final name = obx.QueryStringProperty<GoArea>(
    _entities[4].properties[1],
  );

  /// See [GoArea.latitudes].
  static final latitudes = obx.QueryDoubleVectorProperty<GoArea>(
    _entities[4].properties[2],
  );

  /// See [GoArea.longitudes].
  static final longitudes = obx.QueryDoubleVectorProperty<GoArea>(
    _entities[4].properties[3],
  );
}

/// [GoChurch] entity fields to define ObjectBox queries.
class GoChurch_ {
  /// See [GoChurch.id].
  static final id = obx.QueryIntegerProperty<GoChurch>(
    _entities[5].properties[0],
  );

  /// See [GoChurch.churchName].
  static final churchName = obx.QueryStringProperty<GoChurch>(
    _entities[5].properties[1],
  );

  /// See [GoChurch.pastorName].
  static final pastorName = obx.QueryStringProperty<GoChurch>(
    _entities[5].properties[2],
  );

  /// See [GoChurch.address].
  static final address = obx.QueryStringProperty<GoChurch>(
    _entities[5].properties[3],
  );

  /// See [GoChurch.phone].
  static final phone = obx.QueryStringProperty<GoChurch>(
    _entities[5].properties[4],
  );

  /// See [GoChurch.email].
  static final email = obx.QueryStringProperty<GoChurch>(
    _entities[5].properties[5],
  );

  /// See [GoChurch.latitude].
  static final latitude = obx.QueryDoubleProperty<GoChurch>(
    _entities[5].properties[6],
  );

  /// See [GoChurch.longitude].
  static final longitude = obx.QueryDoubleProperty<GoChurch>(
    _entities[5].properties[7],
  );

  /// See [GoChurch.financialStatus].
  static final financialStatus = obx.QueryStringProperty<GoChurch>(
    _entities[5].properties[8],
  );

  /// see [GoChurch.notes]
  static final notes = obx.QueryRelationToMany<GoChurch, GoChurchNote>(
    _entities[5].relations[0],
  );
}

/// [GoChurchNote] entity fields to define ObjectBox queries.
class GoChurchNote_ {
  /// See [GoChurchNote.id].
  static final id = obx.QueryIntegerProperty<GoChurchNote>(
    _entities[6].properties[0],
  );

  /// See [GoChurchNote.content].
  static final content = obx.QueryStringProperty<GoChurchNote>(
    _entities[6].properties[1],
  );

  /// See [GoChurchNote.createdAt].
  static final createdAt = obx.QueryDateProperty<GoChurchNote>(
    _entities[6].properties[2],
  );

  /// See [GoChurchNote.updatedAt].
  static final updatedAt = obx.QueryDateProperty<GoChurchNote>(
    _entities[6].properties[3],
  );

  /// See [GoChurchNote.church].
  static final church = obx.QueryRelationToOne<GoChurchNote, GoChurch>(
    _entities[6].properties[4],
  );
}

/// [GoContact] entity fields to define ObjectBox queries.
class GoContact_ {
  /// See [GoContact.id].
  static final id = obx.QueryIntegerProperty<GoContact>(
    _entities[7].properties[0],
  );

  /// See [GoContact.fullName].
  static final fullName = obx.QueryStringProperty<GoContact>(
    _entities[7].properties[1],
  );

  /// See [GoContact.latitude].
  static final latitude = obx.QueryDoubleProperty<GoContact>(
    _entities[7].properties[2],
  );

  /// See [GoContact.longitude].
  static final longitude = obx.QueryDoubleProperty<GoContact>(
    _entities[7].properties[3],
  );

  /// See [GoContact.address].
  static final address = obx.QueryStringProperty<GoContact>(
    _entities[7].properties[4],
  );

  /// See [GoContact.birthday].
  static final birthday = obx.QueryStringProperty<GoContact>(
    _entities[7].properties[5],
  );

  /// See [GoContact.phone].
  static final phone = obx.QueryStringProperty<GoContact>(
    _entities[7].properties[6],
  );

  /// See [GoContact.email].
  static final email = obx.QueryStringProperty<GoContact>(
    _entities[7].properties[7],
  );

  /// See [GoContact.isVisited].
  static final isVisited = obx.QueryBooleanProperty<GoContact>(
    _entities[7].properties[8],
  );

  /// See [GoContact.eternalStatus].
  static final eternalStatus = obx.QueryStringProperty<GoContact>(
    _entities[7].properties[9],
  );

  /// see [GoContact.notes]
  static final notes = obx.QueryRelationToMany<GoContact, GoContactNote>(
    _entities[7].relations[0],
  );
}

/// [GoContactNote] entity fields to define ObjectBox queries.
class GoContactNote_ {
  /// See [GoContactNote.id].
  static final id = obx.QueryIntegerProperty<GoContactNote>(
    _entities[8].properties[0],
  );

  /// See [GoContactNote.content].
  static final content = obx.QueryStringProperty<GoContactNote>(
    _entities[8].properties[1],
  );

  /// See [GoContactNote.createdAt].
  static final createdAt = obx.QueryDateProperty<GoContactNote>(
    _entities[8].properties[2],
  );

  /// See [GoContactNote.updatedAt].
  static final updatedAt = obx.QueryDateProperty<GoContactNote>(
    _entities[8].properties[3],
  );

  /// See [GoContactNote.contact].
  static final contact = obx.QueryRelationToOne<GoContactNote, GoContact>(
    _entities[8].properties[4],
  );
}

/// [GoMapInfo] entity fields to define ObjectBox queries.
class GoMapInfo_ {
  /// See [GoMapInfo.id].
  static final id = obx.QueryIntegerProperty<GoMapInfo>(
    _entities[9].properties[0],
  );

  /// See [GoMapInfo.name].
  static final name = obx.QueryStringProperty<GoMapInfo>(
    _entities[9].properties[1],
  );

  /// See [GoMapInfo.filePath].
  static final filePath = obx.QueryStringProperty<GoMapInfo>(
    _entities[9].properties[2],
  );

  /// See [GoMapInfo.downloadUrl].
  static final downloadUrl = obx.QueryStringProperty<GoMapInfo>(
    _entities[9].properties[3],
  );

  /// See [GoMapInfo.isTemporary].
  static final isTemporary = obx.QueryBooleanProperty<GoMapInfo>(
    _entities[9].properties[4],
  );

  /// See [GoMapInfo.latitude].
  static final latitude = obx.QueryDoubleProperty<GoMapInfo>(
    _entities[9].properties[5],
  );

  /// See [GoMapInfo.longitude].
  static final longitude = obx.QueryDoubleProperty<GoMapInfo>(
    _entities[9].properties[6],
  );

  /// See [GoMapInfo.zoomLevel].
  static final zoomLevel = obx.QueryIntegerProperty<GoMapInfo>(
    _entities[9].properties[7],
  );
}

/// [GoMinistry] entity fields to define ObjectBox queries.
class GoMinistry_ {
  /// See [GoMinistry.id].
  static final id = obx.QueryIntegerProperty<GoMinistry>(
    _entities[10].properties[0],
  );

  /// See [GoMinistry.ministryName].
  static final ministryName = obx.QueryStringProperty<GoMinistry>(
    _entities[10].properties[1],
  );

  /// See [GoMinistry.contactName].
  static final contactName = obx.QueryStringProperty<GoMinistry>(
    _entities[10].properties[2],
  );

  /// See [GoMinistry.address].
  static final address = obx.QueryStringProperty<GoMinistry>(
    _entities[10].properties[3],
  );

  /// See [GoMinistry.phone].
  static final phone = obx.QueryStringProperty<GoMinistry>(
    _entities[10].properties[4],
  );

  /// See [GoMinistry.email].
  static final email = obx.QueryStringProperty<GoMinistry>(
    _entities[10].properties[5],
  );

  /// See [GoMinistry.latitude].
  static final latitude = obx.QueryDoubleProperty<GoMinistry>(
    _entities[10].properties[6],
  );

  /// See [GoMinistry.longitude].
  static final longitude = obx.QueryDoubleProperty<GoMinistry>(
    _entities[10].properties[7],
  );

  /// See [GoMinistry.partnerStatus].
  static final partnerStatus = obx.QueryStringProperty<GoMinistry>(
    _entities[10].properties[8],
  );

  /// see [GoMinistry.notes]
  static final notes = obx.QueryRelationToMany<GoMinistry, GoMinistryNote>(
    _entities[10].relations[0],
  );
}

/// [GoMinistryNote] entity fields to define ObjectBox queries.
class GoMinistryNote_ {
  /// See [GoMinistryNote.id].
  static final id = obx.QueryIntegerProperty<GoMinistryNote>(
    _entities[11].properties[0],
  );

  /// See [GoMinistryNote.content].
  static final content = obx.QueryStringProperty<GoMinistryNote>(
    _entities[11].properties[1],
  );

  /// See [GoMinistryNote.createdAt].
  static final createdAt = obx.QueryDateProperty<GoMinistryNote>(
    _entities[11].properties[2],
  );

  /// See [GoMinistryNote.updatedAt].
  static final updatedAt = obx.QueryDateProperty<GoMinistryNote>(
    _entities[11].properties[3],
  );

  /// See [GoMinistryNote.ministry].
  static final ministry = obx.QueryRelationToOne<GoMinistryNote, GoMinistry>(
    _entities[11].properties[4],
  );
}

/// [GoStreet] entity fields to define ObjectBox queries.
class GoStreet_ {
  /// See [GoStreet.id].
  static final id = obx.QueryIntegerProperty<GoStreet>(
    _entities[12].properties[0],
  );

  /// See [GoStreet.name].
  static final name = obx.QueryStringProperty<GoStreet>(
    _entities[12].properties[1],
  );

  /// See [GoStreet.latitudes].
  static final latitudes = obx.QueryDoubleVectorProperty<GoStreet>(
    _entities[12].properties[2],
  );

  /// See [GoStreet.longitudes].
  static final longitudes = obx.QueryDoubleVectorProperty<GoStreet>(
    _entities[12].properties[3],
  );

  /// See [GoStreet.type].
  static final type = obx.QueryStringProperty<GoStreet>(
    _entities[12].properties[4],
  );
}

/// [GoZone] entity fields to define ObjectBox queries.
class GoZone_ {
  /// See [GoZone.id].
  static final id = obx.QueryIntegerProperty<GoZone>(
    _entities[13].properties[0],
  );

  /// See [GoZone.name].
  static final name = obx.QueryStringProperty<GoZone>(
    _entities[13].properties[1],
  );

  /// See [GoZone.latitude].
  static final latitude = obx.QueryDoubleProperty<GoZone>(
    _entities[13].properties[2],
  );

  /// See [GoZone.longitude].
  static final longitude = obx.QueryDoubleProperty<GoZone>(
    _entities[13].properties[3],
  );

  /// See [GoZone.widthInMeters].
  static final widthInMeters = obx.QueryDoubleProperty<GoZone>(
    _entities[13].properties[4],
  );

  /// See [GoZone.heightInMeters].
  static final heightInMeters = obx.QueryDoubleProperty<GoZone>(
    _entities[13].properties[5],
  );
}

/// [StrongsEntry] entity fields to define ObjectBox queries.
class StrongsEntry_ {
  /// See [StrongsEntry.id].
  static final id = obx.QueryIntegerProperty<StrongsEntry>(
    _entities[14].properties[0],
  );

  /// See [StrongsEntry.strongsNumber].
  static final strongsNumber = obx.QueryStringProperty<StrongsEntry>(
    _entities[14].properties[1],
  );

  /// See [StrongsEntry.word].
  static final word = obx.QueryStringProperty<StrongsEntry>(
    _entities[14].properties[2],
  );

  /// See [StrongsEntry.position].
  static final position = obx.QueryIntegerProperty<StrongsEntry>(
    _entities[14].properties[3],
  );

  /// See [StrongsEntry.verse].
  static final verse = obx.QueryRelationToOne<StrongsEntry, Verse>(
    _entities[14].properties[4],
  );
}

/// [UserPreferences] entity fields to define ObjectBox queries.
class UserPreferences_ {
  /// See [UserPreferences.id].
  static final id = obx.QueryIntegerProperty<UserPreferences>(
    _entities[15].properties[0],
  );

  /// See [UserPreferences.currentMap].
  static final currentMap = obx.QueryStringProperty<UserPreferences>(
    _entities[15].properties[1],
  );

  /// See [UserPreferences.fontFamily].
  static final fontFamily = obx.QueryStringProperty<UserPreferences>(
    _entities[15].properties[2],
  );

  /// See [UserPreferences.fontSize].
  static final fontSize = obx.QueryDoubleProperty<UserPreferences>(
    _entities[15].properties[3],
  );

  /// See [UserPreferences.languageCode].
  static final languageCode = obx.QueryStringProperty<UserPreferences>(
    _entities[15].properties[4],
  );

  /// See [UserPreferences.currentBibleVersionId].
  static final currentBibleVersionId =
      obx.QueryIntegerProperty<UserPreferences>(_entities[15].properties[5]);
}

/// [Verse] entity fields to define ObjectBox queries.
class Verse_ {
  /// See [Verse.id].
  static final id = obx.QueryIntegerProperty<Verse>(
    _entities[16].properties[0],
  );

  /// See [Verse.verseNumber].
  static final verseNumber = obx.QueryIntegerProperty<Verse>(
    _entities[16].properties[1],
  );

  /// See [Verse.text].
  static final text = obx.QueryStringProperty<Verse>(
    _entities[16].properties[2],
  );

  /// See [Verse.chapter].
  static final chapter = obx.QueryRelationToOne<Verse, Chapter>(
    _entities[16].properties[3],
  );

  /// see [Verse.strongsEntries]
  static final strongsEntries = obx.QueryBacklinkToMany<StrongsEntry, Verse>(
    StrongsEntry_.verse,
  );

  /// see [Verse.footnotes]
  static final footnotes = obx.QueryBacklinkToMany<Footnote, Verse>(
    Footnote_.verse,
  );
}
