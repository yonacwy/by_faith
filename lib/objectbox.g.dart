// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/user_preferences_model.dart';
import 'features/go/models/go_map_info_model.dart';
import 'features/go/models/go_model.dart';
import 'features/go/models/go_route_models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3736682334618630939),
    name: 'GoArea',
    lastPropertyId: const obx_int.IdUid(4, 574291470570277969),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 907085576111093068),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6710604678326542622),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4617747790049904156),
        name: 'latitudes',
        type: 29,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 574291470570277969),
        name: 'longitudes',
        type: 29,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 620392589609853190),
    name: 'GoChurch',
    lastPropertyId: const obx_int.IdUid(10, 2479000291232998926),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4585408037969516953),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7583578409168450415),
        name: 'churchName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8512127972682727741),
        name: 'pastorName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7897473913377313714),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7153455011801730446),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7768519682836541295),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5708522905476160784),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 398289073994817031),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 5783508167946099018),
        name: 'notes',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2479000291232998926),
        name: 'financialStatus',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 89494934391726012),
    name: 'GoContact',
    lastPropertyId: const obx_int.IdUid(10, 1703385642160129037),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7065516762875731936),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6076199092143906172),
        name: 'fullName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1073473482294091123),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7349197152367968823),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 113612171908284214),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7361241476477843164),
        name: 'birthday',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5382534395190715690),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3468546041445425230),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 8988197481408399133),
        name: 'isVisited',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 1703385642160129037),
        name: 'eternalStatus',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 9045465659676400185),
        name: 'notes',
        targetId: const obx_int.IdUid(4, 2277236322877150046),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 2277236322877150046),
    name: 'GoContactNote',
    lastPropertyId: const obx_int.IdUid(5, 7616150826118194258),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3889274812491275227),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4404437444268551436),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8942208564572235461),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 668462045687701298),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7616150826118194258),
        name: 'contactId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 6532211283084449995),
        relationTarget: 'GoContact',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 5635691535500352189),
    name: 'GoMapInfo',
    lastPropertyId: const obx_int.IdUid(8, 3594284890486592580),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4853579701653100516),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 415696586573940618),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8552493999842008762),
        name: 'filePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1839536468162170948),
        name: 'downloadUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2229188941769137879),
        name: 'isTemporary',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4175932982833498068),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2920329565224070098),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3594284890486592580),
        name: 'zoomLevel',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 7396141940350487027),
    name: 'GoMinistry',
    lastPropertyId: const obx_int.IdUid(10, 1632801783493259176),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3539475381742041073),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7955678667597259268),
        name: 'ministryName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5086657214349891295),
        name: 'contactName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3842596143724901634),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2935348053408916602),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8699415742644707898),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 62060516605731563),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1463102440226916777),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2482916525355438670),
        name: 'notes',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 1632801783493259176),
        name: 'partnerStatus',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 2894274507763351114),
    name: 'GoStreet',
    lastPropertyId: const obx_int.IdUid(4, 5821283900067054267),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1406301605343006574),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6494977968319952900),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7948039798383092201),
        name: 'latitudes',
        type: 29,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5821283900067054267),
        name: 'longitudes',
        type: 29,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 2259683066462582912),
    name: 'GoZone',
    lastPropertyId: const obx_int.IdUid(6, 1262505078431523960),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7731661401214092933),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4288958373158646305),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3426599712766991796),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6113584835445260578),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8825526997118940851),
        name: 'widthInMeters',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1262505078431523960),
        name: 'heightInMeters',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 9136130117670249799),
    name: 'UserPreferences',
    lastPropertyId: const obx_int.IdUid(4, 1019357392367213872),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6796360992230488202),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3468205904827304958),
        name: 'currentMap',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7418257721335977740),
        name: 'fontFamily',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1019357392367213872),
        name: 'fontSize',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(9, 9136130117670249799),
    lastIndexId: const obx_int.IdUid(1, 6532211283084449995),
    lastRelationId: const obx_int.IdUid(1, 9045465659676400185),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    GoArea: obx_int.EntityDefinition<GoArea>(
      model: _entities[0],
      toOneRelations: (GoArea object) => [],
      toManyRelations: (GoArea object) => {},
      getId: (GoArea object) => object.id,
      setId: (GoArea object, int id) {
        object.id = id;
      },
      objectToFB: (GoArea object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final latitudesOffset = fbb.writeListFloat64(object.latitudes);
        final longitudesOffset = fbb.writeListFloat64(object.longitudes);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, latitudesOffset);
        fbb.addOffset(3, longitudesOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final longitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 10, []);
        final object = GoArea(
          id: idParam,
          name: nameParam,
          latitudes: latitudesParam,
          longitudes: longitudesParam,
        );

        return object;
      },
    ),
    GoChurch: obx_int.EntityDefinition<GoChurch>(
      model: _entities[1],
      toOneRelations: (GoChurch object) => [],
      toManyRelations: (GoChurch object) => {},
      getId: (GoChurch object) => object.id,
      setId: (GoChurch object, int id) {
        object.id = id;
      },
      objectToFB: (GoChurch object, fb.Builder fbb) {
        final churchNameOffset = fbb.writeString(object.churchName);
        final pastorNameOffset = object.pastorName == null
            ? null
            : fbb.writeString(object.pastorName!);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final emailOffset = object.email == null
            ? null
            : fbb.writeString(object.email!);
        final notesOffset = object.notes == null
            ? null
            : fbb.writeString(object.notes!);
        final financialStatusOffset = object.financialStatus == null
            ? null
            : fbb.writeString(object.financialStatus!);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, churchNameOffset);
        fbb.addOffset(2, pastorNameOffset);
        fbb.addOffset(3, addressOffset);
        fbb.addOffset(4, phoneOffset);
        fbb.addOffset(5, emailOffset);
        fbb.addFloat64(6, object.latitude);
        fbb.addFloat64(7, object.longitude);
        fbb.addOffset(8, notesOffset);
        fbb.addOffset(9, financialStatusOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final churchNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final pastorNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final notesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final financialStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final object = GoChurch(
          id: idParam,
          churchName: churchNameParam,
          pastorName: pastorNameParam,
          address: addressParam,
          phone: phoneParam,
          email: emailParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          notes: notesParam,
          financialStatus: financialStatusParam,
        );

        return object;
      },
    ),
    GoContact: obx_int.EntityDefinition<GoContact>(
      model: _entities[2],
      toOneRelations: (GoContact object) => [],
      toManyRelations: (GoContact object) => {
        obx_int.RelInfo<GoContact>.toMany(1, object.id): object.notes,
      },
      getId: (GoContact object) => object.id,
      setId: (GoContact object, int id) {
        object.id = id;
      },
      objectToFB: (GoContact object, fb.Builder fbb) {
        final fullNameOffset = fbb.writeString(object.fullName);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final birthdayOffset = object.birthday == null
            ? null
            : fbb.writeString(object.birthday!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final emailOffset = object.email == null
            ? null
            : fbb.writeString(object.email!);
        final eternalStatusOffset = object.eternalStatus == null
            ? null
            : fbb.writeString(object.eternalStatus!);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, fullNameOffset);
        fbb.addFloat64(2, object.latitude);
        fbb.addFloat64(3, object.longitude);
        fbb.addOffset(4, addressOffset);
        fbb.addOffset(5, birthdayOffset);
        fbb.addOffset(6, phoneOffset);
        fbb.addOffset(7, emailOffset);
        fbb.addBool(8, object.isVisited);
        fbb.addOffset(9, eternalStatusOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final fullNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          8,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final birthdayParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final isVisitedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          20,
          false,
        );
        final eternalStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final object = GoContact(
          id: idParam,
          fullName: fullNameParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          address: addressParam,
          birthday: birthdayParam,
          phone: phoneParam,
          email: emailParam,
          isVisited: isVisitedParam,
          eternalStatus: eternalStatusParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<GoContact>(
          object.notes,
          store,
          obx_int.RelInfo<GoContact>.toMany(1, object.id),
        );
        return object;
      },
    ),
    GoContactNote: obx_int.EntityDefinition<GoContactNote>(
      model: _entities[3],
      toOneRelations: (GoContactNote object) => [object.contact],
      toManyRelations: (GoContactNote object) => {},
      getId: (GoContactNote object) => object.id,
      setId: (GoContactNote object, int id) {
        object.id = id;
      },
      objectToFB: (GoContactNote object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(3, object.updatedAt?.millisecondsSinceEpoch);
        fbb.addInt64(4, object.contact.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final updatedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final updatedAtParam = updatedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
        final object = GoContactNote(
          id: idParam,
          content: contentParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        );
        object.contact.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.contact.attach(store);
        return object;
      },
    ),
    GoMapInfo: obx_int.EntityDefinition<GoMapInfo>(
      model: _entities[4],
      toOneRelations: (GoMapInfo object) => [],
      toManyRelations: (GoMapInfo object) => {},
      getId: (GoMapInfo object) => object.id,
      setId: (GoMapInfo object, int id) {
        object.id = id;
      },
      objectToFB: (GoMapInfo object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final filePathOffset = object.filePath == null
            ? null
            : fbb.writeString(object.filePath!);
        final downloadUrlOffset = object.downloadUrl == null
            ? null
            : fbb.writeString(object.downloadUrl!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, filePathOffset);
        fbb.addOffset(3, downloadUrlOffset);
        fbb.addBool(4, object.isTemporary);
        fbb.addFloat64(5, object.latitude);
        fbb.addFloat64(6, object.longitude);
        fbb.addInt64(7, object.zoomLevel);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final filePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final downloadUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final isTemporaryParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final zoomLevelParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final object = GoMapInfo(
          id: idParam,
          name: nameParam,
          filePath: filePathParam,
          downloadUrl: downloadUrlParam,
          isTemporary: isTemporaryParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          zoomLevel: zoomLevelParam,
        );

        return object;
      },
    ),
    GoMinistry: obx_int.EntityDefinition<GoMinistry>(
      model: _entities[5],
      toOneRelations: (GoMinistry object) => [],
      toManyRelations: (GoMinistry object) => {},
      getId: (GoMinistry object) => object.id,
      setId: (GoMinistry object, int id) {
        object.id = id;
      },
      objectToFB: (GoMinistry object, fb.Builder fbb) {
        final ministryNameOffset = fbb.writeString(object.ministryName);
        final contactNameOffset = object.contactName == null
            ? null
            : fbb.writeString(object.contactName!);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final emailOffset = object.email == null
            ? null
            : fbb.writeString(object.email!);
        final notesOffset = object.notes == null
            ? null
            : fbb.writeString(object.notes!);
        final partnerStatusOffset = object.partnerStatus == null
            ? null
            : fbb.writeString(object.partnerStatus!);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, ministryNameOffset);
        fbb.addOffset(2, contactNameOffset);
        fbb.addOffset(3, addressOffset);
        fbb.addOffset(4, phoneOffset);
        fbb.addOffset(5, emailOffset);
        fbb.addFloat64(6, object.latitude);
        fbb.addFloat64(7, object.longitude);
        fbb.addOffset(8, notesOffset);
        fbb.addOffset(9, partnerStatusOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final ministryNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final contactNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final notesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final partnerStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final object = GoMinistry(
          id: idParam,
          ministryName: ministryNameParam,
          contactName: contactNameParam,
          address: addressParam,
          phone: phoneParam,
          email: emailParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          notes: notesParam,
          partnerStatus: partnerStatusParam,
        );

        return object;
      },
    ),
    GoStreet: obx_int.EntityDefinition<GoStreet>(
      model: _entities[6],
      toOneRelations: (GoStreet object) => [],
      toManyRelations: (GoStreet object) => {},
      getId: (GoStreet object) => object.id,
      setId: (GoStreet object, int id) {
        object.id = id;
      },
      objectToFB: (GoStreet object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final latitudesOffset = fbb.writeListFloat64(object.latitudes);
        final longitudesOffset = fbb.writeListFloat64(object.longitudes);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, latitudesOffset);
        fbb.addOffset(3, longitudesOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final longitudesParam = const fb.ListReader<double>(
          fb.Float64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 10, []);
        final object = GoStreet(
          id: idParam,
          name: nameParam,
          latitudes: latitudesParam,
          longitudes: longitudesParam,
        );

        return object;
      },
    ),
    GoZone: obx_int.EntityDefinition<GoZone>(
      model: _entities[7],
      toOneRelations: (GoZone object) => [],
      toManyRelations: (GoZone object) => {},
      getId: (GoZone object) => object.id,
      setId: (GoZone object, int id) {
        object.id = id;
      },
      objectToFB: (GoZone object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addFloat64(2, object.latitude);
        fbb.addFloat64(3, object.longitude);
        fbb.addFloat64(4, object.widthInMeters);
        fbb.addFloat64(5, object.heightInMeters);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final latitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final longitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final widthInMetersParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final heightInMetersParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final object = GoZone(
          name: nameParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          widthInMeters: widthInMetersParam,
          heightInMeters: heightInMetersParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    UserPreferences: obx_int.EntityDefinition<UserPreferences>(
      model: _entities[8],
      toOneRelations: (UserPreferences object) => [],
      toManyRelations: (UserPreferences object) => {},
      getId: (UserPreferences object) => object.id,
      setId: (UserPreferences object, int id) {
        object.id = id;
      },
      objectToFB: (UserPreferences object, fb.Builder fbb) {
        final currentMapOffset = object.currentMap == null
            ? null
            : fbb.writeString(object.currentMap!);
        final fontFamilyOffset = object.fontFamily == null
            ? null
            : fbb.writeString(object.fontFamily!);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, currentMapOffset);
        fbb.addOffset(2, fontFamilyOffset);
        fbb.addFloat64(3, object.fontSize);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final currentMapParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final fontFamilyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final fontSizeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final object = UserPreferences(
          id: idParam,
          currentMap: currentMapParam,
          fontFamily: fontFamilyParam,
          fontSize: fontSizeParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [GoArea] entity fields to define ObjectBox queries.
class GoArea_ {
  /// See [GoArea.id].
  static final id = obx.QueryIntegerProperty<GoArea>(
    _entities[0].properties[0],
  );

  /// See [GoArea.name].
  static final name = obx.QueryStringProperty<GoArea>(
    _entities[0].properties[1],
  );

  /// See [GoArea.latitudes].
  static final latitudes = obx.QueryDoubleVectorProperty<GoArea>(
    _entities[0].properties[2],
  );

  /// See [GoArea.longitudes].
  static final longitudes = obx.QueryDoubleVectorProperty<GoArea>(
    _entities[0].properties[3],
  );
}

/// [GoChurch] entity fields to define ObjectBox queries.
class GoChurch_ {
  /// See [GoChurch.id].
  static final id = obx.QueryIntegerProperty<GoChurch>(
    _entities[1].properties[0],
  );

  /// See [GoChurch.churchName].
  static final churchName = obx.QueryStringProperty<GoChurch>(
    _entities[1].properties[1],
  );

  /// See [GoChurch.pastorName].
  static final pastorName = obx.QueryStringProperty<GoChurch>(
    _entities[1].properties[2],
  );

  /// See [GoChurch.address].
  static final address = obx.QueryStringProperty<GoChurch>(
    _entities[1].properties[3],
  );

  /// See [GoChurch.phone].
  static final phone = obx.QueryStringProperty<GoChurch>(
    _entities[1].properties[4],
  );

  /// See [GoChurch.email].
  static final email = obx.QueryStringProperty<GoChurch>(
    _entities[1].properties[5],
  );

  /// See [GoChurch.latitude].
  static final latitude = obx.QueryDoubleProperty<GoChurch>(
    _entities[1].properties[6],
  );

  /// See [GoChurch.longitude].
  static final longitude = obx.QueryDoubleProperty<GoChurch>(
    _entities[1].properties[7],
  );

  /// See [GoChurch.notes].
  static final notes = obx.QueryStringProperty<GoChurch>(
    _entities[1].properties[8],
  );

  /// See [GoChurch.financialStatus].
  static final financialStatus = obx.QueryStringProperty<GoChurch>(
    _entities[1].properties[9],
  );
}

/// [GoContact] entity fields to define ObjectBox queries.
class GoContact_ {
  /// See [GoContact.id].
  static final id = obx.QueryIntegerProperty<GoContact>(
    _entities[2].properties[0],
  );

  /// See [GoContact.fullName].
  static final fullName = obx.QueryStringProperty<GoContact>(
    _entities[2].properties[1],
  );

  /// See [GoContact.latitude].
  static final latitude = obx.QueryDoubleProperty<GoContact>(
    _entities[2].properties[2],
  );

  /// See [GoContact.longitude].
  static final longitude = obx.QueryDoubleProperty<GoContact>(
    _entities[2].properties[3],
  );

  /// See [GoContact.address].
  static final address = obx.QueryStringProperty<GoContact>(
    _entities[2].properties[4],
  );

  /// See [GoContact.birthday].
  static final birthday = obx.QueryStringProperty<GoContact>(
    _entities[2].properties[5],
  );

  /// See [GoContact.phone].
  static final phone = obx.QueryStringProperty<GoContact>(
    _entities[2].properties[6],
  );

  /// See [GoContact.email].
  static final email = obx.QueryStringProperty<GoContact>(
    _entities[2].properties[7],
  );

  /// See [GoContact.isVisited].
  static final isVisited = obx.QueryBooleanProperty<GoContact>(
    _entities[2].properties[8],
  );

  /// See [GoContact.eternalStatus].
  static final eternalStatus = obx.QueryStringProperty<GoContact>(
    _entities[2].properties[9],
  );

  /// see [GoContact.notes]
  static final notes = obx.QueryRelationToMany<GoContact, GoContactNote>(
    _entities[2].relations[0],
  );
}

/// [GoContactNote] entity fields to define ObjectBox queries.
class GoContactNote_ {
  /// See [GoContactNote.id].
  static final id = obx.QueryIntegerProperty<GoContactNote>(
    _entities[3].properties[0],
  );

  /// See [GoContactNote.content].
  static final content = obx.QueryStringProperty<GoContactNote>(
    _entities[3].properties[1],
  );

  /// See [GoContactNote.createdAt].
  static final createdAt = obx.QueryDateProperty<GoContactNote>(
    _entities[3].properties[2],
  );

  /// See [GoContactNote.updatedAt].
  static final updatedAt = obx.QueryDateProperty<GoContactNote>(
    _entities[3].properties[3],
  );

  /// See [GoContactNote.contact].
  static final contact = obx.QueryRelationToOne<GoContactNote, GoContact>(
    _entities[3].properties[4],
  );
}

/// [GoMapInfo] entity fields to define ObjectBox queries.
class GoMapInfo_ {
  /// See [GoMapInfo.id].
  static final id = obx.QueryIntegerProperty<GoMapInfo>(
    _entities[4].properties[0],
  );

  /// See [GoMapInfo.name].
  static final name = obx.QueryStringProperty<GoMapInfo>(
    _entities[4].properties[1],
  );

  /// See [GoMapInfo.filePath].
  static final filePath = obx.QueryStringProperty<GoMapInfo>(
    _entities[4].properties[2],
  );

  /// See [GoMapInfo.downloadUrl].
  static final downloadUrl = obx.QueryStringProperty<GoMapInfo>(
    _entities[4].properties[3],
  );

  /// See [GoMapInfo.isTemporary].
  static final isTemporary = obx.QueryBooleanProperty<GoMapInfo>(
    _entities[4].properties[4],
  );

  /// See [GoMapInfo.latitude].
  static final latitude = obx.QueryDoubleProperty<GoMapInfo>(
    _entities[4].properties[5],
  );

  /// See [GoMapInfo.longitude].
  static final longitude = obx.QueryDoubleProperty<GoMapInfo>(
    _entities[4].properties[6],
  );

  /// See [GoMapInfo.zoomLevel].
  static final zoomLevel = obx.QueryIntegerProperty<GoMapInfo>(
    _entities[4].properties[7],
  );
}

/// [GoMinistry] entity fields to define ObjectBox queries.
class GoMinistry_ {
  /// See [GoMinistry.id].
  static final id = obx.QueryIntegerProperty<GoMinistry>(
    _entities[5].properties[0],
  );

  /// See [GoMinistry.ministryName].
  static final ministryName = obx.QueryStringProperty<GoMinistry>(
    _entities[5].properties[1],
  );

  /// See [GoMinistry.contactName].
  static final contactName = obx.QueryStringProperty<GoMinistry>(
    _entities[5].properties[2],
  );

  /// See [GoMinistry.address].
  static final address = obx.QueryStringProperty<GoMinistry>(
    _entities[5].properties[3],
  );

  /// See [GoMinistry.phone].
  static final phone = obx.QueryStringProperty<GoMinistry>(
    _entities[5].properties[4],
  );

  /// See [GoMinistry.email].
  static final email = obx.QueryStringProperty<GoMinistry>(
    _entities[5].properties[5],
  );

  /// See [GoMinistry.latitude].
  static final latitude = obx.QueryDoubleProperty<GoMinistry>(
    _entities[5].properties[6],
  );

  /// See [GoMinistry.longitude].
  static final longitude = obx.QueryDoubleProperty<GoMinistry>(
    _entities[5].properties[7],
  );

  /// See [GoMinistry.notes].
  static final notes = obx.QueryStringProperty<GoMinistry>(
    _entities[5].properties[8],
  );

  /// See [GoMinistry.partnerStatus].
  static final partnerStatus = obx.QueryStringProperty<GoMinistry>(
    _entities[5].properties[9],
  );
}

/// [GoStreet] entity fields to define ObjectBox queries.
class GoStreet_ {
  /// See [GoStreet.id].
  static final id = obx.QueryIntegerProperty<GoStreet>(
    _entities[6].properties[0],
  );

  /// See [GoStreet.name].
  static final name = obx.QueryStringProperty<GoStreet>(
    _entities[6].properties[1],
  );

  /// See [GoStreet.latitudes].
  static final latitudes = obx.QueryDoubleVectorProperty<GoStreet>(
    _entities[6].properties[2],
  );

  /// See [GoStreet.longitudes].
  static final longitudes = obx.QueryDoubleVectorProperty<GoStreet>(
    _entities[6].properties[3],
  );
}

/// [GoZone] entity fields to define ObjectBox queries.
class GoZone_ {
  /// See [GoZone.id].
  static final id = obx.QueryIntegerProperty<GoZone>(
    _entities[7].properties[0],
  );

  /// See [GoZone.name].
  static final name = obx.QueryStringProperty<GoZone>(
    _entities[7].properties[1],
  );

  /// See [GoZone.latitude].
  static final latitude = obx.QueryDoubleProperty<GoZone>(
    _entities[7].properties[2],
  );

  /// See [GoZone.longitude].
  static final longitude = obx.QueryDoubleProperty<GoZone>(
    _entities[7].properties[3],
  );

  /// See [GoZone.widthInMeters].
  static final widthInMeters = obx.QueryDoubleProperty<GoZone>(
    _entities[7].properties[4],
  );

  /// See [GoZone.heightInMeters].
  static final heightInMeters = obx.QueryDoubleProperty<GoZone>(
    _entities[7].properties[5],
  );
}

/// [UserPreferences] entity fields to define ObjectBox queries.
class UserPreferences_ {
  /// See [UserPreferences.id].
  static final id = obx.QueryIntegerProperty<UserPreferences>(
    _entities[8].properties[0],
  );

  /// See [UserPreferences.currentMap].
  static final currentMap = obx.QueryStringProperty<UserPreferences>(
    _entities[8].properties[1],
  );

  /// See [UserPreferences.fontFamily].
  static final fontFamily = obx.QueryStringProperty<UserPreferences>(
    _entities[8].properties[2],
  );

  /// See [UserPreferences.fontSize].
  static final fontSize = obx.QueryDoubleProperty<UserPreferences>(
    _entities[8].properties[3],
  );
}
